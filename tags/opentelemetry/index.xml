<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenTelemetry on my tech ramblings</title>
    
    
    
    <link>https://www.mytechramblings.com/tags/opentelemetry/</link>
    <description>Recent content in OpenTelemetry on my tech ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Sep 2022 10:01:32 +0200</lastBuildDate>
    
	<atom:link href="https://www.mytechramblings.com/tags/opentelemetry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with OpenTelemetry Metrics in .NET. Part 1: Key concepts</title>
      <link>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-metrics-and-dotnet-part-1/</link>
      <pubDate>Tue, 27 Sep 2022 10:01:32 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-metrics-and-dotnet-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          In this 2 part series-post I’m going to show you how to use OpenTelemetry to generate custom metrics and how to visualize those metrics using Prometheus and Grafana. In part 1 I’ll be talking about some key concepts that you should know when using OpenTelemetry Metrics with .NET.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting started with AWS Distro for OpenTelemetry and distributed tracing using .NET. Part 2: Building the demo</title>
      <link>https://www.mytechramblings.com/posts/getting-started-with-aws-distro-for-otel-and-dotnet-part-2/</link>
      <pubDate>Tue, 01 Feb 2022 10:00:12 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/getting-started-with-aws-distro-for-otel-and-dotnet-part-2/</guid>
      <description>
        
          
          
          
        
        
        
          This is a 2 part-series post. In part 2 I’ll show you how to build and configure properly a few distributed .NET apps that will send traces to the AWS OTEL Collector, and also how to analyze those traces in AWS X-Ray.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting started with AWS Distro for OpenTelemetry and distributed tracing using .NET. Part 1: Setting up the AWS OTEL Collector</title>
      <link>https://www.mytechramblings.com/posts/getting-started-with-aws-distro-for-otel-and-dotnet-part-1/</link>
      <pubDate>Mon, 31 Jan 2022 10:10:12 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/getting-started-with-aws-distro-for-otel-and-dotnet-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          This is a 2 part-series post. In part 1 I’ll be talking about what is the AWS OpenTelemetry Collector and how to set it up for ingesting and exporting traces to AWS X-Ray.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting started with OpenTelemetry and distributed tracing in .NET Core</title>
      <link>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-and-dotnet-core/</link>
      <pubDate>Thu, 08 Apr 2021 10:11:51 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-and-dotnet-core/</guid>
      <description>
        
          
          
          
        
        
        
          OpenTelemetry is a set of APIs, SDKs, tooling and integrations that are designed for the creation and management of telemetry data such as traces, metrics, and logs. On today&#39;s post I&#39;m going to show you how you can start using OTEL and distributed tracing with .NET Core.
          
        
        </description>
    </item>
    
  </channel>
</rss>