<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on my tech ramblings</title>
    
    
    
    <link>https://www.mytechramblings.com/tags/dotnet/</link>
    <description>Recent content in dotnet on my tech ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Jun 2021 00:07:29 +0200</lastBuildDate>
    
	<atom:link href="https://www.mytechramblings.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to pick a few .NET apps, convert them into .NET templates, package them together in a NuGet package and use them as templates within Visual Studio. Part 1: Key Concepts</title>
      <link>https://www.mytechramblings.com/posts/create-dotnet-templates-for-visual-studio-part-1/</link>
      <pubDate>Mon, 14 Jun 2021 00:07:29 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/create-dotnet-templates-for-visual-studio-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          This is a 2 part-series.
 In part 1 I will talk about some key concepts that you should know when creating a .NET template. In part 2 I will show you the process of converting a .NET app into a .NET template.   When you install the .NET SDK you receive a handful of built-in templates for creating projects like console apps, web apis, class libraries, unit test projects, etc.
          
        
        </description>
    </item>
    
    <item>
      <title>4 ways to deploy a .NET Core Lambda using AWS CDK</title>
      <link>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</link>
      <pubDate>Tue, 25 May 2021 10:01:46 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</guid>
      <description>
        
          
          
          
        
        
        
          Show me the code
If you don&amp;rsquo;t care about the post I have upload the code on my Github
 I already talked in some of my post about AWS CDK, but for those unaware of AWS CDK is a framework that allows us to define cloud infrastructure in code.
AWS CDK is available in a bunch of different languages:
 JavaScript TypeScript Python Java .NET Core  I already shared my thoughts about AWS CDK in some of my older posts so in this one I will cut to the chase and I will focus on showing you some of the options available when you want to deploy a .
          
        
        </description>
    </item>
    
    <item>
      <title>Getting started with OpenTelemetry and distributed tracing in .NET Core</title>
      <link>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-and-dotnet-core/</link>
      <pubDate>Thu, 08 Apr 2021 10:11:51 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-and-dotnet-core/</guid>
      <description>
        
          
          
          
        
        
        
          Show me the code
If you don&amp;rsquo;t care about the post I have upload the code on my Github
 A few months ago the first stable version of the OpenTelemetry client for dotnet was released and since then I have wanted to write a little bit about it.
OpenTelemetry is a set of APIs, SDKs, tooling and integrations that are designed for the creation and management of telemetry data such as traces, metrics, and logs.
          
        
        </description>
    </item>
    
    <item>
      <title>How to configure your custom roslyn analyzer using an .editorconfig file</title>
      <link>https://www.mytechramblings.com/posts/configure-roslyn-analyzers-using-editorconfig/</link>
      <pubDate>Thu, 14 Jan 2021 12:59:43 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/configure-roslyn-analyzers-using-editorconfig/</guid>
      <description>
        
          
          
          
        
        
        
          Roslyn Analyzers are extensions that analyze source code and report violations. Some analyzers are built-into VS (like the IDE analyzers that report style issues) and some are third party ones which can be installed (like StyleCopyAnalyzers, FxCopAnalyzers, etc.).
Analyzers can be configurated using file(s) to allow end users to control the behavior of each analyzer and severity of reported diagnostics. This may be via an editorconfig or a ruleset file or even completely custom format specific to the third party analyzer package.
          
        
        </description>
    </item>
    
    <item>
      <title>How to centrally manage NuGet package versions within your solution</title>
      <link>https://www.mytechramblings.com/posts/centrally-manage-nuget-versions/</link>
      <pubDate>Wed, 02 Sep 2020 10:01:20 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/centrally-manage-nuget-versions/</guid>
      <description>
        
          
          
          
        
        
        
          A pretty common scenario in complex .NET applications is having them splitted in multiple csharp projects inside a single solution, even with the proliferation of microservices is pretty common seeing the client and the business logic decoupled in multiple projects inside a single solution.
And that behaviour is even more common if you&amp;rsquo;re using some kind of software architecture like &amp;ldquo;Domain Driven Design&amp;rdquo;, &amp;ldquo;Hexagonal Architecture&amp;rdquo; or &amp;ldquo;Clean Architecture&amp;rdquo;.
A common problem that usually appears when the number of projects begins to pile up inside a single solution is mantaining consistency between nuget versions, and quite some times you end up with every project using a different version of the same package.
          
        
        </description>
    </item>
    
    <item>
      <title>Why and how you should add a healthcheck endpoint to your Wcf legacy applications</title>
      <link>https://www.mytechramblings.com/posts/how-to-add-healthchecks-to-wcf-apps/</link>
      <pubDate>Sat, 04 Jul 2020 17:30:06 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/how-to-add-healthchecks-to-wcf-apps/</guid>
      <description>
        
          
          
          
        
        
        
          Nowadays no one on his right mind is going to create a WCF from scratch. It really makes no sense to do it. It&amp;rsquo;s a deprecated technology, it does not work with .NET Core, only works on Windows OS and personally I found the configuration confusing as hell, every time I need to modify an existing one I have to spend a good amount of time trying to figure out what everything means.
          
        
        </description>
    </item>
    
    <item>
      <title>Enforce the use of a specific .NET Core version using Roslyn</title>
      <link>https://www.mytechramblings.com/posts/enforce-your-dotnet-apps-framework-version-using-roslyn-analyzers/</link>
      <pubDate>Wed, 24 Jun 2020 15:25:42 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/enforce-your-dotnet-apps-framework-version-using-roslyn-analyzers/</guid>
      <description>
        
          
          
          
        
        
        
          In these past few years Microsoft has kept a steady flow of new .NET Core versions: .NET Core 1.0, 1.1, 2.0, 2.1, 2.2 and so on and so forth.
If you have hundreds of applications in your company, it&amp;rsquo;s almost impossible to keep them updated to the most recent version of the framework, so most probably you&amp;rsquo;re going to end up having multiple versions running at the same time.
When trying to choose which versions are you going to support in your company a factor to consider is that only a few of those versions are long-time support (LTS).
          
        
        </description>
    </item>
    
  </channel>
</rss>