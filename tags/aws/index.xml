<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on my tech ramblings</title>
    
    
    
    <link>https://www.mytechramblings.com/tags/aws/</link>
    <description>Recent content in aws on my tech ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Oct 2021 09:05:14 +0200</lastBuildDate>
    
	<atom:link href="https://www.mytechramblings.com/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing how to use some container vulnerabilities scanners with Azure Pipelines</title>
      <link>https://www.mytechramblings.com/posts/testing-container-vulnerabilities-scanners-using-azure-pipelines/</link>
      <pubDate>Wed, 27 Oct 2021 09:05:14 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/testing-container-vulnerabilities-scanners-using-azure-pipelines/</guid>
      <description>
        
          
          
          
        
        
        
          Just show me the code
As always if you don’t care about the post I have upload the source code on my Github.
 A big part of any organization’s risk assessment process is to be aware of and gain visibility into vulnerabilities in the software being used. Vulnerability scanning allows us to review the security state of the container images and take actions to fix issues identified during the scan, resulting in more secure deployments.
          
        
        </description>
    </item>
    
    <item>
      <title>Some common gotchas when trying to deploy a dotnet gRPC app to AWS ECS</title>
      <link>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</link>
      <pubDate>Wed, 21 Jul 2021 10:05:32 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</guid>
      <description>
        
          
          
          
        
        
        
          Just show me the code
As always if you don’t care about the post I have upload a few examples on my Github.
 Nowadays creating a new dotnet gRPC application is pretty straightforward. From the developer standpoint the experience of creating a gRPC app it&amp;rsquo;s quite similar to creating an API, furthermore, Visual Studio also offers Intellisense support for gRPC services and proto files.
As I stated before developing a dotnet gRPC app right now is an easy feat, but when you try to deploy it in some cloud provider that&amp;rsquo;s when some wrinkles might appear.
          
        
        </description>
    </item>
    
    <item>
      <title>4 ways to deploy a .NET Core Lambda using AWS CDK</title>
      <link>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</link>
      <pubDate>Tue, 25 May 2021 10:01:46 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</guid>
      <description>
        
          
          
          
        
        
        
          Show me the code
If you don&amp;rsquo;t care about the post I have upload the code on my Github
 I already talked in some of my post about AWS CDK, but for those unaware of AWS CDK is a framework that allows us to define cloud infrastructure in code.
AWS CDK is available in a bunch of different languages:
 JavaScript TypeScript Python Java .NET Core  I already shared my thoughts about AWS CDK in some of my older posts so in this one I will cut to the chase and I will focus on showing you some of the options available when you want to deploy a .
          
        
        </description>
    </item>
    
    <item>
      <title>An opinionated approach about how to create an AWS ECS Fargate cluster and deploy apps on it using Azure DevOps Pipelines</title>
      <link>https://www.mytechramblings.com/posts/create-an-ecs-cluster-and-deploy-apps-using-azure-devops/</link>
      <pubDate>Tue, 10 Nov 2020 10:10:18 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/create-an-ecs-cluster-and-deploy-apps-using-azure-devops/</guid>
      <description>
        
          
          
          
        
        
        
          These past couple of weeks I&amp;rsquo;ve been tinkering with AWS ECS Fargate and after losing some time tackling different approaches I thought it might be useful to write down what I ended up building.
My goal was trying to build an AWS ECS Fargate cluster and deploy apps on it using Azure DevOps Pipelines and I had 3 clear objectives I wanted to achieve.
 All the infrastructure in AWS must be created using IaC (infrastructure-as-code) and must be created using an Azure DevOps pipeline.
          
        
        </description>
    </item>
    
    <item>
      <title>Provisioning resources on AWS using AWS CDK and Azure DevOps Pipelines</title>
      <link>https://www.mytechramblings.com/posts/provisioning-aws-resources-using-cdk-azure-devops/</link>
      <pubDate>Wed, 30 Sep 2020 10:02:21 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/provisioning-aws-resources-using-cdk-azure-devops/</guid>
      <description>
        
          
          
          
        
        
        
          Introduction First of all let me tell you that I&amp;rsquo;m huge proponent of Terraform as a framework for defining infrastructure in code. One of the things that I like most about Terraform is that not only every major cloud provider (AWS, Azure, GCP) offers their own provider but each day more and more companies are starting to offer their own Terraform providers, and those are great news because with Terraform I can create almost any cloud infrastructure that I want and also a huge array of varied resources such as: VMware vSphere Virtual Machines, RabbitMq Queues, Grafana dashboards amongst many many others.
          
        
        </description>
    </item>
    
  </channel>
</rss>