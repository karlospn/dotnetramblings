<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on my tech ramblings</title>
    
    
    
    <link>https://www.mytechramblings.com/tags/grpc/</link>
    <description>Recent content in grpc on my tech ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jul 2021 10:05:32 +0200</lastBuildDate>
    
	<atom:link href="https://www.mytechramblings.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Some common gotchas when trying to deploy a dotnet gRPC app to AWS ECS</title>
      <link>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</link>
      <pubDate>Wed, 21 Jul 2021 10:05:32 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</guid>
      <description>
        
          
          
          
        
        
        
          Just show me the code
As always if you donâ€™t care about the post I have upload a few examples on my Github.
 Nowadays creating a new dotnet gRPC application is pretty straightforward. From the developer standpoint the experience of creating a gRPC app it&amp;rsquo;s quite similar to creating an API, furthermore, Visual Studio also offers Intellisense support for gRPC services and proto files.
As I stated before developing a dotnet gRPC app right now is an easy feat, but when you try to deploy it in some cloud provider that&amp;rsquo;s when some wrinkles might appear.
          
        
        </description>
    </item>
    
  </channel>
</rss>