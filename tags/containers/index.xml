<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers on my tech ramblings</title>
    
    
    
    <link>https://www.mytechramblings.com/tags/containers/</link>
    <description>Recent content in Containers on my tech ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Mar 2024 22:00:30 +0100</lastBuildDate>
    
	<atom:link href="https://www.mytechramblings.com/tags/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building and deploying a .NET 8 App on an ARM64 processor using Azure Pipelines and AWS ECS Fargate. Part 1: How to build multi-platform images</title>
      <link>https://www.mytechramblings.com/posts/building-and-deploying-a-dotnet-app-on-arm64-part1-cross-compilation/</link>
      <pubDate>Tue, 12 Mar 2024 22:00:30 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/building-and-deploying-a-dotnet-app-on-arm64-part1-cross-compilation/</guid>
      <description>
        
          
          
          
        
        
        
          In this two-part series, I’m going to show you how to build and deploy a .NET 8 app container image that targets an ARM64 processor. In part 1, I’ll be discussing some key concepts that you should know about how to build .NET multi-platform images.
          
        
        </description>
    </item>
    
    <item>
      <title>Testing Chiseled Ubuntu container images with .NET</title>
      <link>https://www.mytechramblings.com/posts/testing-chiseled-ubuntu-containers-with-dotnet/</link>
      <pubDate>Mon, 12 Jun 2023 10:03:07 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/testing-chiseled-ubuntu-containers-with-dotnet/</guid>
      <description>
        
          
          
          
        
        
        
          The objective of this post is to test Ubuntu Chiseled images in combination with .NET, evaluating whether it is truly worthwhile to migrate our .NET apps to utilize these base images or not.
          
        
        </description>
    </item>
    
    <item>
      <title>5 ways to deploy a .NET Lambda using AWS CDK</title>
      <link>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</link>
      <pubDate>Wed, 08 Feb 2023 10:01:46 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/deploy-dotnet-lambdas-with-aws-cdk/</guid>
      <description>
        
          
          
          
        
        
        
          This post is going to walk you through 5 different ways to deploy a .NET lambda using AWS CDK.
          
        
        </description>
    </item>
    
    <item>
      <title>How to automatically purge stale images from Azure Container Registry using ACR Tasks</title>
      <link>https://www.mytechramblings.com/posts/automatically-purge-acr-images-using-acr-tasks/</link>
      <pubDate>Wed, 21 Dec 2022 13:03:19 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/automatically-purge-acr-images-using-acr-tasks/</guid>
      <description>
        
          
          
          
        
        
        
          Keeping your container registry free of stale or unwanted images is a task that often gets overlooked when beginning working with containers in the enterprise. In this post, I want to show you how you can use ACR Tasks to automate this process when working with Azure Container Registry.
          
        
        </description>
    </item>
    
    <item>
      <title>Trying out the built-in container support for the .NET SDK</title>
      <link>https://www.mytechramblings.com/posts/trying-out-the-built-in-container-support-for-the-dotnet-7-sdk/</link>
      <pubDate>Wed, 30 Nov 2022 10:01:13 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/trying-out-the-built-in-container-support-for-the-dotnet-7-sdk/</guid>
      <description>
        
          
          
          
        
        
        
          A few months ago the built-in container support for the .NET SDK was announced. In this post I&#39;ll put this feature to test, I&#39;ll try to migrate from an application that contains a rather complex Dockerfile to a new version that has no Dockerfile and instead uses the container support feature.
          
        
        </description>
    </item>
    
    <item>
      <title>Keep your .NET platform images up to date using AWS ECR and Azure Pipelines</title>
      <link>https://www.mytechramblings.com/posts/keep-your-platform-images-updated-when-using-aws-ecr-with-azure-pipelines/</link>
      <pubDate>Thu, 08 Sep 2022 11:06:41 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/keep-your-platform-images-updated-when-using-aws-ecr-with-azure-pipelines/</guid>
      <description>
        
          
          
          
        
        
        
          When talking about containers security on the enterprise one of the best practices is to use your own platform images, those platform images are the base for your company applications. In this post I&#39;m going to show you an opinionated implementation of how to automate the creation and update of your own .NET platform images using Azure Pipelines and AWS ECR.
          
        
        </description>
    </item>
    
    <item>
      <title>Linting a .NET 6 app Dockerfile using Hadolint, dockerfile_lint and Azure Pipelines</title>
      <link>https://www.mytechramblings.com/posts/linting-a-dotnet-app-dockerfile-using-hadolint-dockerfile-lint-and-azure-pipelines/</link>
      <pubDate>Mon, 16 May 2022 10:05:01 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/linting-a-dotnet-app-dockerfile-using-hadolint-dockerfile-lint-and-azure-pipelines/</guid>
      <description>
        
          
          
          
        
        
        
          Like any other language, Dockerfiles can and should be linted for updated best practices and code quality checks. In this post I will show you how to incorporate a couple of Dockerfile linters into our Secure DevOps workflow to ensure our Dockerfiles are always readable, understandable and maintainable.
          
        
        </description>
    </item>
    
    <item>
      <title>Profiling a .NET6 app running on AWS ECS Fargate with dotnet-monitor</title>
      <link>https://www.mytechramblings.com/posts/profiling-a-net-app-on-aws-ecs-fargate-with-dotnet-monitor/</link>
      <pubDate>Wed, 30 Mar 2022 10:25:20 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/profiling-a-net-app-on-aws-ecs-fargate-with-dotnet-monitor/</guid>
      <description>
        
          
          
          
        
        
        
          The dotnet-monitor tool is an alternative to the .NET CLI diagnostic tools. In this post I&#39;ll show you how to deploy a .NET 6 application into AWS ECS Fargate with dotnet-monitor as a sidecar container, and afterwards how you can profile an app using the dotnet-monitor HTTP API.
          
        
        </description>
    </item>
    
    <item>
      <title>Profiling a .NET6 app running in a linux container with dotnet-trace, dotnet-dump, dotnet-counters, dotnet-gcdump and Visual Studio</title>
      <link>https://www.mytechramblings.com/posts/profiling-a-net-app-with-dotnet-cli-diagnostic-tools/</link>
      <pubDate>Tue, 01 Mar 2022 10:01:37 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/profiling-a-net-app-with-dotnet-cli-diagnostic-tools/</guid>
      <description>
        
          
          
          
        
        
        
          This post contains a few practical examples showing you how to profile a .NET6 application running in a linux container using the .NET CLI diagnostic tools (dotnet-trace, dotnet-dump, dotnet-counters and dotnet-gcdump) and Visual Studio.
          
        
        </description>
    </item>
    
    <item>
      <title>Testing how to use some container vulnerabilities scanners with Azure Pipelines</title>
      <link>https://www.mytechramblings.com/posts/testing-container-vulnerabilities-scanners-using-azure-pipelines/</link>
      <pubDate>Mon, 25 Oct 2021 10:45:14 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/testing-container-vulnerabilities-scanners-using-azure-pipelines/</guid>
      <description>
        
          
          
          
        
        
        
          Vulnerability scanning allows us to review the security state of the container images and take actions to fix issues identified during the scan, resulting in more secure deployments. In this post I will be covering how you can use some of the most well-known scanners alongside with your Azure DevOps CI/CD YAML Pipelines.
          
        
        </description>
    </item>
    
    <item>
      <title>Setting up the SonarQube scanner when building a .NET Core container image</title>
      <link>https://www.mytechramblings.com/posts/running-a-sonarqube-scan-when-building-docker-image/</link>
      <pubDate>Tue, 14 Sep 2021 10:05:00 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/running-a-sonarqube-scan-when-building-docker-image/</guid>
      <description>
        
          
          
          
        
        
        
          If you&#39;re using containers quite probably you&#39;re doing the build, test and analysis steps inside the Dockerfile, and setting up the SonarQube scanner when building the image can be a little more cumbersome than usual, and that&#39;s why I wanted to write a little bit about it.
          
        
        </description>
    </item>
    
    <item>
      <title>Some common gotchas when trying to deploy a dotnet gRPC app to AWS ECS</title>
      <link>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</link>
      <pubDate>Wed, 21 Jul 2021 10:05:32 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/some-gotchas-when-deploying-a-dotnet-grpc-app-to-ecs/</guid>
      <description>
        
          
          
          
        
        
        
          Lately I&#39;ve been deploying a sizable amount of gRPC services to AWS ECS so I thought it might be useful to talk a little bit about some gotchas I have encountered. Some of the problems I&#39;ll be talking about on this post are specific of the .NET implementation of gRPC and another ones are from the AWS side.
          
        
        </description>
    </item>
    
    <item>
      <title>An opinionated approach about how to create an AWS ECS Fargate cluster and deploy apps on it using Azure DevOps Pipelines</title>
      <link>https://www.mytechramblings.com/posts/create-an-ecs-cluster-and-deploy-apps-using-azure-devops/</link>
      <pubDate>Tue, 10 Nov 2020 10:10:18 +0100</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/create-an-ecs-cluster-and-deploy-apps-using-azure-devops/</guid>
      <description>
        
          
          
          
        
        
        
          These past couple of weeks I&#39;ve been tinkering with AWS ECS Fargate and after losing some time tackling different approaches I thought it might be useful to write down what I ended up building, so without further ado let&#39;s dig in.
          
        
        </description>
    </item>
    
    <item>
      <title>How to restore nuget packages from an Azure DevOps Private Feed when building a Docker image</title>
      <link>https://www.mytechramblings.com/posts/how-to-use-a-private-nuget-feed-with-docker/</link>
      <pubDate>Tue, 14 Jul 2020 19:12:41 +0200</pubDate>
      
      <guid>https://www.mytechramblings.com/posts/how-to-use-a-private-nuget-feed-with-docker/</guid>
      <description>
        
          
          
          
        
        
        
          In this post I&#39;ll show you how to restore NuGet packages from an Azure DevOps private feed when building a Docker image.
          
        
        </description>
    </item>
    
  </channel>
</rss>